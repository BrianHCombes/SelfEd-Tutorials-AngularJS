SelfEd Date: 		01/19/2017

SelfEd Title:           SelfEd-Angular-Directives-Custom-With-Link-Keyword
   
SelfEd Objective:       To further my understanding of directives using the
                        < link > keyword

SelfEd Catalyst:        Continued learning but also to see if this will help
                        accomplish my objective of showing the particular 
                        data next to the associated button that is clicked
                        in a button menu generated by ngRepeat in SelfEd:
                        < SelfEd Angular-Practice-ProjectA-HTTP-Service >

SelfEd References:      Book: AngularJS Up and Running

Process:
    Gonna start by assembling a simple directive and make sure it works.



01/21/2017
    Maybe some luck:
    While doing SelfEd: < SelfEd-Angular-Directives-Custom-With-Link-Keyword >
    I added an extra property to the resident data array I called < show >. I
    initialize the property with the boolean value < false >. Then after the
    array is displayed using ngRepeat (which includes buttons) and upon 
    selecting a button I pass the < $index > of that button to the 
    code to change the boolean value of that button's < show > property
    to < true >. Then of course, since  a change has occurred Angular updates
    everything and ngRepeat picks up that property of that particular button.
    So if I apply that property to < ngShow > for any arbitrary information I
    want to show next to that button, it works great.

    Although I did it with pure Angular it still seems cheesy that I have
    to add the (created on my part) < show > property to each object in 
    the array, then set it accordingly. But it works good, for now.

    About the < link > keyword:
    Suddenly, I have a simple working example using the < link > keyword. 
    See < Code Block AAA >. But I can do the same thing in a < service >
    so I need to think which approach is best for given circumstances and
    what are best practices. First thought is that I'm not using a 
    < controller > in the directive. But I can involve a < controller > per
    the < Angular API > but I don't know how to apply it just yet. 
 